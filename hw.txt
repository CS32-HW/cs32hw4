==========
problem 1e
==========

In test case three, the vector has 5 items added on the third iteration of the
loop, invalidating the iterator p. This is because the underlying array is
copied over to a larger one and the original one is deallocated.

=========
problem 3
=========

The call to Map<Coord, int>::insert causes a compilation error because the
method makes use of the == operator and the < operator, which were not defined
for the Coord class.

==========
problem 4b
==========

If the function had only one parameter, it would be unable to know what the
names of the previous domains were. It would only have the name of the current
domain and a vector of its subdomains, but not the path taken to get to the
current domain.

==========
problem 5a
==========

The time complexity is O(N^3)

==========
problem 5b
==========

The time complexity is still O(N^3). Although the coefficient in front of the
N^3 might have been reduced, the number of operations still scales by N^3.

==========
problem 6a
==========

The time complexity is O(N^2) because getting and inserting a value into a
linked list are linear operations, which gets executed N times, making it N^2.

==========
problem 6b
==========

The time complexity is O(N) and it is better than the implementation in part a
because it only traverses through the linked list once.
